/**
 * @license
 * Copyright 2022-2024 Matter.js Authors
 * SPDX-License-Identifier: Apache-2.0
 */

/*** THIS FILE IS GENERATED, DO NOT EDIT ***/

import * as definitions from "./definitions.js";
import { ClusterModel } from "../../models/ClusterModel.js";
import { DatatypeModel } from "../../models/DatatypeModel.js";
import { AttributeModel } from "../../models/AttributeModel.js";
import { FieldModel } from "../../models/FieldModel.js";
import { DeviceTypeModel } from "../../models/DeviceTypeModel.js";
import { SemanticNamespaceModel } from "../../models/SemanticNamespaceModel.js";

export const Identify = new ClusterModel(definitions.Identify);
export const Groups = new ClusterModel(definitions.Groups);
export const ScenesManagement = new ClusterModel(definitions.ScenesManagement);
export const OnOff = new ClusterModel(definitions.OnOff);
export const LevelControl = new ClusterModel(definitions.LevelControl);
export const PulseWidthModulation = new ClusterModel(definitions.PulseWidthModulation);
export const BooleanState = new ClusterModel(definitions.BooleanState);
export const BooleanStateConfiguration = new ClusterModel(definitions.BooleanStateConfiguration);
export const ModeSelect = new ClusterModel(definitions.ModeSelect);
export const ModeBase = new ClusterModel(definitions.ModeBase);
export const LowPower = new ClusterModel(definitions.LowPower);
export const WakeOnLan = new ClusterModel(definitions.WakeOnLan);
export const Switch = new ClusterModel(definitions.Switch);
export const OperationalState = new ClusterModel(definitions.OperationalState);
export const AlarmBase = new ClusterModel(definitions.AlarmBase);
export const Messages = new ClusterModel(definitions.Messages);
export const IlluminanceMeasurement = new ClusterModel(definitions.IlluminanceMeasurement);
export const TemperatureMeasurement = new ClusterModel(definitions.TemperatureMeasurement);
export const PressureMeasurement = new ClusterModel(definitions.PressureMeasurement);
export const FlowMeasurement = new ClusterModel(definitions.FlowMeasurement);
export const RelativeHumidityMeasurement = new ClusterModel(definitions.RelativeHumidityMeasurement);
export const OccupancySensing = new ClusterModel(definitions.OccupancySensing);
export const ResourceMonitoring = new ClusterModel(definitions.ResourceMonitoring);
export const HepaFilterMonitoring = new ClusterModel(definitions.HepaFilterMonitoring);
export const ActivatedCarbonFilterMonitoring = new ClusterModel(definitions.ActivatedCarbonFilterMonitoring);
export const AirQuality = new ClusterModel(definitions.AirQuality);
export const ConcentrationMeasurement = new ClusterModel(definitions.ConcentrationMeasurement);
export const CarbonMonoxideConcentrationMeasurement = new ClusterModel(definitions.CarbonMonoxideConcentrationMeasurement);
export const CarbonDioxideConcentrationMeasurement = new ClusterModel(definitions.CarbonDioxideConcentrationMeasurement);
export const NitrogenDioxideConcentrationMeasurement = new ClusterModel(definitions.NitrogenDioxideConcentrationMeasurement);
export const OzoneConcentrationMeasurement = new ClusterModel(definitions.OzoneConcentrationMeasurement);
export const Pm25ConcentrationMeasurement = new ClusterModel(definitions.Pm25ConcentrationMeasurement);
export const FormaldehydeConcentrationMeasurement = new ClusterModel(definitions.FormaldehydeConcentrationMeasurement);
export const Pm1ConcentrationMeasurement = new ClusterModel(definitions.Pm1ConcentrationMeasurement);
export const Pm10ConcentrationMeasurement = new ClusterModel(definitions.Pm10ConcentrationMeasurement);
export const TotalVolatileOrganicCompoundsConcentrationMeasurement = new ClusterModel(definitions.TotalVolatileOrganicCompoundsConcentrationMeasurement);
export const RadonConcentrationMeasurement = new ClusterModel(definitions.RadonConcentrationMeasurement);
export const SmokeCoAlarm = new ClusterModel(definitions.SmokeCoAlarm);
export const ElectricalEnergyMeasurement = new ClusterModel(definitions.ElectricalEnergyMeasurement);
export const ElectricalPowerMeasurement = new ClusterModel(definitions.ElectricalPowerMeasurement);
export const ColorControl = new ClusterModel(definitions.ColorControl);
export const BallastConfiguration = new ClusterModel(definitions.BallastConfiguration);
export const PumpConfigurationAndControl = new ClusterModel(definitions.PumpConfigurationAndControl);
export const Thermostat = new ClusterModel(definitions.Thermostat);
export const FanControl = new ClusterModel(definitions.FanControl);
export const ThermostatUserInterfaceConfiguration = new ClusterModel(definitions.ThermostatUserInterfaceConfiguration);
export const ValveConfigurationAndControl = new ClusterModel(definitions.ValveConfigurationAndControl);
export const DoorLock = new ClusterModel(definitions.DoorLock);
export const WindowCovering = new ClusterModel(definitions.WindowCovering);
export const AccountLogin = new ClusterModel(definitions.AccountLogin);
export const ApplicationBasic = new ClusterModel(definitions.ApplicationBasic);
export const ApplicationLauncher = new ClusterModel(definitions.ApplicationLauncher);
export const AudioOutput = new ClusterModel(definitions.AudioOutput);
export const Channel = new ClusterModel(definitions.Channel);
export const ContentLauncher = new ClusterModel(definitions.ContentLauncher);
export const KeypadInput = new ClusterModel(definitions.KeypadInput);
export const MediaInput = new ClusterModel(definitions.MediaInput);
export const MediaPlayback = new ClusterModel(definitions.MediaPlayback);
export const TargetNavigator = new ClusterModel(definitions.TargetNavigator);
export const ContentAppObserver = new ClusterModel(definitions.ContentAppObserver);
export const ContentControl = new ClusterModel(definitions.ContentControl);
export const RvcRunMode = new ClusterModel(definitions.RvcRunMode);
export const RvcCleanMode = new ClusterModel(definitions.RvcCleanMode);
export const RvcOperationalState = new ClusterModel(definitions.RvcOperationalState);
export const TemperatureControl = new ClusterModel(definitions.TemperatureControl);
export const DishwasherMode = new ClusterModel(definitions.DishwasherMode);
export const DishwasherAlarm = new ClusterModel(definitions.DishwasherAlarm);
export const LaundryWasherMode = new ClusterModel(definitions.LaundryWasherMode);
export const LaundryWasherControls = new ClusterModel(definitions.LaundryWasherControls);
export const RefrigeratorAndTemperatureControlledCabinetMode = new ClusterModel(definitions.RefrigeratorAndTemperatureControlledCabinetMode);
export const RefrigeratorAlarm = new ClusterModel(definitions.RefrigeratorAlarm);
export const LaundryDryerControls = new ClusterModel(definitions.LaundryDryerControls);
export const OvenCavityOperationalState = new ClusterModel(definitions.OvenCavityOperationalState);
export const OvenMode = new ClusterModel(definitions.OvenMode);
export const MicrowaveOvenMode = new ClusterModel(definitions.MicrowaveOvenMode);
export const MicrowaveOvenControl = new ClusterModel(definitions.MicrowaveOvenControl);
export const DeviceEnergyManagement = new ClusterModel(definitions.DeviceEnergyManagement);
export const EnergyEvse = new ClusterModel(definitions.EnergyEvse);
export const EnergyEvseMode = new ClusterModel(definitions.EnergyEvseMode);
export const EnergyPreference = new ClusterModel(definitions.EnergyPreference);
export const DeviceEnergyManagementMode = new ClusterModel(definitions.DeviceEnergyManagementMode);
export const Descriptor = new ClusterModel(definitions.Descriptor);
export const Binding = new ClusterModel(definitions.Binding);
export const Label = new ClusterModel(definitions.Label);
export const FixedLabel = new ClusterModel(definitions.FixedLabel);
export const UserLabel = new ClusterModel(definitions.UserLabel);
export const AccessControl = new ClusterModel(definitions.AccessControl);
export const BridgedDeviceBasicInformation = new ClusterModel(definitions.BridgedDeviceBasicInformation);
export const Actions = new ClusterModel(definitions.Actions);
export const ProxyDiscovery = new ClusterModel(definitions.ProxyDiscovery);
export const ProxyConfiguration = new ClusterModel(definitions.ProxyConfiguration);
export const ValidProxies = new ClusterModel(definitions.ValidProxies);
export const IcdManagement = new ClusterModel(definitions.IcdManagement);
export const BasicInformation = new ClusterModel(definitions.BasicInformation);
export const GroupKeyManagement = new ClusterModel(definitions.GroupKeyManagement);
export const LocalizationConfiguration = new ClusterModel(definitions.LocalizationConfiguration);
export const TimeFormatLocalization = new ClusterModel(definitions.TimeFormatLocalization);
export const UnitLocalization = new ClusterModel(definitions.UnitLocalization);
export const PowerSourceConfiguration = new ClusterModel(definitions.PowerSourceConfiguration);
export const PowerSource = new ClusterModel(definitions.PowerSource);
export const PowerTopology = new ClusterModel(definitions.PowerTopology);
export const NetworkCommissioning = new ClusterModel(definitions.NetworkCommissioning);
export const GeneralCommissioning = new ClusterModel(definitions.GeneralCommissioning);
export const DiagnosticLogs = new ClusterModel(definitions.DiagnosticLogs);
export const GeneralDiagnostics = new ClusterModel(definitions.GeneralDiagnostics);
export const SoftwareDiagnostics = new ClusterModel(definitions.SoftwareDiagnostics);
export const ThreadNetworkDiagnostics = new ClusterModel(definitions.ThreadNetworkDiagnostics);
export const WiFiNetworkDiagnostics = new ClusterModel(definitions.WiFiNetworkDiagnostics);
export const EthernetNetworkDiagnostics = new ClusterModel(definitions.EthernetNetworkDiagnostics);
export const TimeSynchronization = new ClusterModel(definitions.TimeSynchronization);
export const OperationalCredentials = new ClusterModel(definitions.OperationalCredentials);
export const AdministratorCommissioning = new ClusterModel(definitions.AdministratorCommissioning);
export const OtaSoftwareUpdateProvider = new ClusterModel(definitions.OtaSoftwareUpdateProvider);
export const OtaSoftwareUpdateRequestor = new ClusterModel(definitions.OtaSoftwareUpdateRequestor);
export const MeasurementTypeEnum = new DatatypeModel(definitions.MeasurementTypeEnum);
export const MeasurementAccuracyRangeStruct = new DatatypeModel(definitions.MeasurementAccuracyRangeStruct);
export const MeasurementAccuracyStruct = new DatatypeModel(definitions.MeasurementAccuracyStruct);
export const bool = new DatatypeModel(definitions.bool);
export const map8 = new DatatypeModel(definitions.map8);
export const map16 = new DatatypeModel(definitions.map16);
export const map32 = new DatatypeModel(definitions.map32);
export const map64 = new DatatypeModel(definitions.map64);
export const uint8 = new DatatypeModel(definitions.uint8);
export const uint16 = new DatatypeModel(definitions.uint16);
export const uint24 = new DatatypeModel(definitions.uint24);
export const uint32 = new DatatypeModel(definitions.uint32);
export const uint40 = new DatatypeModel(definitions.uint40);
export const uint48 = new DatatypeModel(definitions.uint48);
export const uint56 = new DatatypeModel(definitions.uint56);
export const uint64 = new DatatypeModel(definitions.uint64);
export const int8 = new DatatypeModel(definitions.int8);
export const int16 = new DatatypeModel(definitions.int16);
export const int24 = new DatatypeModel(definitions.int24);
export const int32 = new DatatypeModel(definitions.int32);
export const int40 = new DatatypeModel(definitions.int40);
export const int48 = new DatatypeModel(definitions.int48);
export const int56 = new DatatypeModel(definitions.int56);
export const int64 = new DatatypeModel(definitions.int64);
export const single = new DatatypeModel(definitions.single);
export const double = new DatatypeModel(definitions.double);
export const octstr = new DatatypeModel(definitions.octstr);
export const list = new DatatypeModel(definitions.list);
export const struct = new DatatypeModel(definitions.struct);
export const percent = new DatatypeModel(definitions.percent);
export const percent100ths = new DatatypeModel(definitions.percent100ths);
export const tod = new DatatypeModel(definitions.tod);
export const date = new DatatypeModel(definitions.date);
export const temperature = new DatatypeModel(definitions.temperature);
export const enum8 = new DatatypeModel(definitions.enum8)
export const enum16 = new DatatypeModel(definitions.enum16)
export const priority = new DatatypeModel(definitions.priority);
export const status = new DatatypeModel(definitions.status);
export const string = new DatatypeModel(definitions.string);
export const ipadr = new DatatypeModel(definitions.ipadr);
export const hwadr = new DatatypeModel(definitions.hwadr);
export const semtag = new DatatypeModel(definitions.semtag);
export const namespace = new DatatypeModel(definitions.namespace)
export const tag = new DatatypeModel(definitions.tag);
export const WildcardPathFlagsBitmap = new DatatypeModel(definitions.WildcardPathFlagsBitmap);
export const SoftwareVersionCertificationStatusEnum = new DatatypeModel(definitions.SoftwareVersionCertificationStatusEnum);
export const any = new DatatypeModel(definitions.any);
export const ClusterRevision = new AttributeModel(definitions.ClusterRevision);
export const FeatureMap = new AttributeModel(definitions.FeatureMap);
export const AttributeList = new AttributeModel(definitions.AttributeList);
export const EventList = new AttributeModel(definitions.EventList);
export const AcceptedCommandList = new AttributeModel(definitions.AcceptedCommandList);
export const GeneratedCommandList = new AttributeModel(definitions.GeneratedCommandList);
export const FabricIndex = new FieldModel(definitions.FabricIndex);
export const BaseDT = new DeviceTypeModel(definitions.BaseDT);
export const RootNodeDT = new DeviceTypeModel(definitions.RootNodeDT);
export const PowerSourceDT = new DeviceTypeModel(definitions.PowerSourceDT);
export const OtaRequestorDT = new DeviceTypeModel(definitions.OtaRequestorDT);
export const OtaProviderDT = new DeviceTypeModel(definitions.OtaProviderDT);
export const BridgedNodeDT = new DeviceTypeModel(definitions.BridgedNodeDT);
export const ElectricalSensorDT = new DeviceTypeModel(definitions.ElectricalSensorDT);
export const DeviceEnergyManagementDT = new DeviceTypeModel(definitions.DeviceEnergyManagementDT);
export const OnOffLightDT = new DeviceTypeModel(definitions.OnOffLightDT);
export const DimmableLightDT = new DeviceTypeModel(definitions.DimmableLightDT);
export const ColorTemperatureLightDT = new DeviceTypeModel(definitions.ColorTemperatureLightDT);
export const ExtendedColorLightDT = new DeviceTypeModel(definitions.ExtendedColorLightDT);
export const OnOffPlugInUnitDT = new DeviceTypeModel(definitions.OnOffPlugInUnitDT);
export const DimmablePlugInUnitDT = new DeviceTypeModel(definitions.DimmablePlugInUnitDT);
export const PumpDT = new DeviceTypeModel(definitions.PumpDT);
export const WaterValveDT = new DeviceTypeModel(definitions.WaterValveDT);
export const OnOffLightSwitchDT = new DeviceTypeModel(definitions.OnOffLightSwitchDT);
export const DimmerSwitchDT = new DeviceTypeModel(definitions.DimmerSwitchDT);
export const ColorDimmerSwitchDT = new DeviceTypeModel(definitions.ColorDimmerSwitchDT);
export const ControlBridgeDT = new DeviceTypeModel(definitions.ControlBridgeDT);
export const PumpControllerDT = new DeviceTypeModel(definitions.PumpControllerDT);
export const GenericSwitchDT = new DeviceTypeModel(definitions.GenericSwitchDT);
export const ContactSensorDT = new DeviceTypeModel(definitions.ContactSensorDT);
export const LightSensorDT = new DeviceTypeModel(definitions.LightSensorDT);
export const OccupancySensorDT = new DeviceTypeModel(definitions.OccupancySensorDT);
export const TemperatureSensorDT = new DeviceTypeModel(definitions.TemperatureSensorDT);
export const PressureSensorDT = new DeviceTypeModel(definitions.PressureSensorDT);
export const FlowSensorDT = new DeviceTypeModel(definitions.FlowSensorDT);
export const HumiditySensorDT = new DeviceTypeModel(definitions.HumiditySensorDT);
export const OnOffSensorDT = new DeviceTypeModel(definitions.OnOffSensorDT);
export const SmokeCoAlarmDT = new DeviceTypeModel(definitions.SmokeCoAlarmDT);
export const AirQualitySensorDT = new DeviceTypeModel(definitions.AirQualitySensorDT);
export const WaterFreezeDetectorDT = new DeviceTypeModel(definitions.WaterFreezeDetectorDT);
export const WaterLeakDetectorDT = new DeviceTypeModel(definitions.WaterLeakDetectorDT);
export const RainSensorDT = new DeviceTypeModel(definitions.RainSensorDT);
export const DoorLockDT = new DeviceTypeModel(definitions.DoorLockDT);
export const DoorLockControllerDT = new DeviceTypeModel(definitions.DoorLockControllerDT);
export const WindowCoveringDT = new DeviceTypeModel(definitions.WindowCoveringDT);
export const WindowCoveringControllerDT = new DeviceTypeModel(definitions.WindowCoveringControllerDT);
export const ThermostatDT = new DeviceTypeModel(definitions.ThermostatDT);
export const FanDT = new DeviceTypeModel(definitions.FanDT);
export const AirPurifierDT = new DeviceTypeModel(definitions.AirPurifierDT);
export const BasicVideoPlayerDT = new DeviceTypeModel(definitions.BasicVideoPlayerDT);
export const CastingVideoPlayerDT = new DeviceTypeModel(definitions.CastingVideoPlayerDT);
export const SpeakerDT = new DeviceTypeModel(definitions.SpeakerDT);
export const ContentAppDT = new DeviceTypeModel(definitions.ContentAppDT);
export const CastingVideoClientDT = new DeviceTypeModel(definitions.CastingVideoClientDT);
export const VideoRemoteControlDT = new DeviceTypeModel(definitions.VideoRemoteControlDT);
export const ModeSelectDT = new DeviceTypeModel(definitions.ModeSelectDT);
export const AggregatorDT = new DeviceTypeModel(definitions.AggregatorDT);
export const RoboticVacuumCleanerDT = new DeviceTypeModel(definitions.RoboticVacuumCleanerDT);
export const LaundryWasherDT = new DeviceTypeModel(definitions.LaundryWasherDT);
export const RefrigeratorDT = new DeviceTypeModel(definitions.RefrigeratorDT);
export const RoomAirConditionerDT = new DeviceTypeModel(definitions.RoomAirConditionerDT);
export const TemperatureControlledCabinetDT = new DeviceTypeModel(definitions.TemperatureControlledCabinetDT);
export const DishwasherDT = new DeviceTypeModel(definitions.DishwasherDT);
export const LaundryDryerDT = new DeviceTypeModel(definitions.LaundryDryerDT);
export const CookSurfaceDT = new DeviceTypeModel(definitions.CookSurfaceDT);
export const CooktopDT = new DeviceTypeModel(definitions.CooktopDT);
export const OvenDT = new DeviceTypeModel(definitions.OvenDT);
export const ExtractorHoodDT = new DeviceTypeModel(definitions.ExtractorHoodDT);
export const MicrowaveOvenDT = new DeviceTypeModel(definitions.MicrowaveOvenDT);
export const ClosureNS = new SemanticNamespaceModel(definitions.ClosureNS);
export const CompassDirectionNS = new SemanticNamespaceModel(definitions.CompassDirectionNS);
export const CompassLocationNS = new SemanticNamespaceModel(definitions.CompassLocationNS);
export const DirectionNS = new SemanticNamespaceModel(definitions.DirectionNS);
export const LevelNS = new SemanticNamespaceModel(definitions.LevelNS);
export const LocationNS = new SemanticNamespaceModel(definitions.LocationNS);
export const NumberNS = new SemanticNamespaceModel(definitions.NumberNS);
export const PositionNS = new SemanticNamespaceModel(definitions.PositionNS);
export const ElectricalMeasurementNS = new SemanticNamespaceModel(definitions.ElectricalMeasurementNS);
export const LaundryNS = new SemanticNamespaceModel(definitions.LaundryNS);
export const PowerSourceNS = new SemanticNamespaceModel(definitions.PowerSourceNS);
export const RefrigeratorNS = new SemanticNamespaceModel(definitions.RefrigeratorNS);
export const RoomAirConditionerNS = new SemanticNamespaceModel(definitions.RoomAirConditionerNS);
export const SwitchesNS = new SemanticNamespaceModel(definitions.SwitchesNS);
